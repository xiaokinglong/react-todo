{"version":3,"sources":["store/reducer.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["defaultsVlaue","val","list","store","createStore","state","arguments","length","undefined","action","type","newState","JSON","parse","stringify","value","item","i","content","push","console","log","forEach","index","splice","window","__REDUX_DEVTOOLS_EXTENSION__","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeVal","e","target","dispatch","changeState","setState","getState","add","notification","open","message","description","onClick","del","delAction","subscribe","_this2","react_default","a","createElement","className","input","placeholder","onChange","onPressEnter","es_button","header","footer","bordered","dataSource","avatar","renderItem","Item","Meta","icon","theme","bind","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAGMA,EAAgB,CACpBC,IAAK,GACLC,KAAM,ICIOC,EALDC,YDIC,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BN,EAAeS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,GAAoB,iBAAhBC,EAAOC,KAAyB,CAClC,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,IAE3C,OADAM,EAASV,IAAMQ,EAAOM,MACfJ,EAGT,GAAoB,gBAAhBF,EAAOC,KAAwB,CACjC,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,IACvCW,EAAO,CACTC,EAAGZ,EAAMH,KAAKK,OACdW,QAASP,EAASV,KAIpB,OAFAU,EAAST,KAAKiB,KAAKH,GACnBL,EAASV,IAAM,GACRU,EAIT,GAAoB,aAAhBF,EAAOC,KAAqB,CAC7B,IAAMC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUT,IAO3C,OANAe,QAAQC,IAAIZ,GACZE,EAAST,KAAKoB,QAAQ,SAACN,EAAMO,GACxBP,EAAKC,IAAMR,EAAOQ,GAClBN,EAAST,KAAKsB,OAAOD,EAAO,KAG1BZ,EAEV,OAAON,GC/BPoB,OAAOC,8BAAgCD,OAAOC,kECuFjCC,sBApFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,UAAY,SAACC,GACX,IAAM5B,EAAS,CACbC,KAAM,eACNK,MAAOsB,EAAEC,OAAOvB,OAGlBZ,EAAMoC,SAAS9B,IAbEoB,EAgBnBW,YAAc,WACZX,EAAKY,SAAStC,EAAMuC,aAjBHb,EAoBnBc,IAAM,WAEJ,GADAvB,QAAQC,IAAI,mBACRQ,EAAKxB,MAAMJ,IAAK,CAIlBE,EAAMoC,SAHS,CACb7B,KAAM,qBAIRkC,IAAaC,KAAK,CAChBC,QAAS,2BACTC,YAAa,uCACbC,QAAS,WACP5B,QAAQC,IAAI,6BAhCDQ,EAsCnBoB,IAAM,SAAChD,GACLmB,QAAQC,IAAIpB,GACZ,IAAMiD,EAAY,CAChBxC,KAAM,WACNO,EAAGhB,GAELE,EAAMoC,SAASW,IA1CfrB,EAAKxB,MAAQF,EAAMuC,WAEnBvC,EAAMgD,UAAUtB,EAAKW,aAJJX,wEA8CV,IAAAuB,EAAApB,KACP,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,YAAc,YACd3C,MAASiB,KAAK3B,MAAMJ,IACpB0D,SAAY3B,KAAKI,UACjBwB,aAAgB5B,KAAKW,MAEvBU,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQnD,KAAK,UAAUsC,QAAShB,KAAKW,KAArC,iBAEFU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACrD,EAAA,EAAD,CACE4D,OAAQT,EAAAC,EAAAC,cAAA,wBACRQ,OAAQV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAQxB,KAAK3B,MAAMH,KAAKK,QAC/CyD,UAAQ,EACRC,WAAY9D,EAAMuC,WAAWxC,KAC7BgE,OAAO,KACPC,WAAY,SAAAnD,GAAI,OAChBqC,EAAAC,EAAAC,cAACrD,EAAA,EAAKkE,KAAN,KACEf,EAAAC,EAAAC,cAACrD,EAAA,EAAKkE,KAAKC,KAAX,CACEH,OACEb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAM5D,KAAO,eACb6D,MAAQ,UACRvB,QAAWI,EAAKH,IAAIuB,KAAKpB,EAAMpC,EAAKC,OAIxCoC,EAAAC,EAAAC,cAAA,WAAMvC,EAAKE,sBA5EPuD,cCIEC,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b59e2135.chunk.js","sourcesContent":["import { Action } from \"rxjs/internal/scheduler/Action\";\n\n// 基础的数据\nconst defaultsVlaue = {\n  val: '',\n  list: [],\n}\n// reducer中的数据是不能修改\nexport default (state= defaultsVlaue, action) => {\n  if (action.type === 'change_value') {\n    const newState = JSON.parse(JSON.stringify(state))\n    newState.val = action.value\n    return newState\n  }\n\n  if (action.type === 'change_list') {\n    const newState = JSON.parse(JSON.stringify(state))\n    let item = {\n      i: state.list.length,\n      content: newState.val\n    }\n    newState.list.push(item)\n    newState.val = ''\n    return newState\n  }\n\n  // 删除某一项\n  if (action.type === 'del_list') {\n     const newState = JSON.parse(JSON.stringify(state))\n     console.log(action)\n     newState.list.forEach((item, index) => {\n      if (item.i === action.i) {\n          newState.list.splice(index, 1)\n      }\n     })\n     return newState\n  }\n  return state\n}","import { createStore } from 'redux'\n\nimport reducer from './reducer'\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n\nexport default store","import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport { Input } from 'antd'\nimport store from './store'\nimport { List, Button, notification ,Icon} from 'antd'\nimport './App.css'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = store.getState()\n\n    store.subscribe(this.changeState)\n  }\n\n  changeVal = (e) => {\n    const action = {\n      type: 'change_value',\n      value: e.target.value\n    }\n    // 将 input 的 value 传递给 store\n    store.dispatch(action)\n  }\n\n  changeState = () => {\n    this.setState(store.getState())\n  }\n\n  add = () => {\n    console.log('点击 le')\n    if (this.state.val) {\n      const action = {\n        type: 'change_list',\n      }\n      store.dispatch(action)\n    } else {\n      notification.open({\n        message: '温馨提示',\n        description: '输入不能为空',\n        onClick: () => {\n          console.log('Notification Clicked!');\n        },\n      });\n    }\n    \n  }\n  del = (val) => {\n    console.log(val)\n    const delAction = {\n      type: 'del_list',\n      i: val\n    }\n    store.dispatch(delAction)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <Input \n            placeholder = \"todo list\" \n            value = {this.state.val}\n            onChange = {this.changeVal}\n            onPressEnter = {this.add}\n          />\n          <Button type=\"primary\" onClick={this.add}>添加</Button>\n        </div>\n        <div className=\"list\">\n          <List\n            header={<div>todo list</div>}\n            footer={<div className=\"len\">{ this.state.list.length }</div>}\n            bordered\n            dataSource={store.getState().list}\n            avatar=\"hh\"\n            renderItem={item => (\n            <List.Item>\n              <List.Item.Meta\n                avatar = {\n                  <Icon type = \"close-circle\"\n                  theme = \"twoTone\"\n                  onClick = {this.del.bind(this, item.i)}\n                  />\n                }\n              />\n              <div>{item.content}</div>\n            </List.Item>)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}